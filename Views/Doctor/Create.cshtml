@model HMSApp.Models.Doctor
@{
    ViewData["Title"] = "Add Doctor";
}
<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-lg-7 col-md-9">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-primary text-white d-flex align-items-center">
                    <h4 class="m-0"><i class="bi bi-person-plus me-2"></i>Add Doctor</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" novalidate>
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label asp-for="Name" class="form-label fw-semibold"></label>
                                <input asp-for="Name" class="form-control" placeholder="Full name" />
                                <span asp-validation-for="Name" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Specialization" class="form-label fw-semibold"></label>
                                <input asp-for="Specialization" class="form-control" placeholder="e.g. Cardiology" />
                                <span asp-validation-for="Specialization" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="ContactNumber" class="form-label fw-semibold"></label>
                                <input asp-for="ContactNumber" class="form-control" minlength="10" maxlength="10" placeholder="Phone" />
                                <span asp-validation-for="ContactNumber" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Username" class="form-label fw-semibold"></label>
                                <input asp-for="Username" class="form-control" placeholder="Login username" />
                                <span asp-validation-for="Username" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Password" class="form-label fw-semibold"></label>
                                <div class="position-relative">
                                    <input asp-for="Password" type="password" class="form-control" placeholder="Password" />
                                    <button type="button" class="btn btn-sm position-absolute" style="right: 10px; top: 50%; transform: translateY(-50%); border: none; background: none; color: #666;" onclick="togglePasswordVisibility('Password')">
                                        <i class="bi bi-eye" id="Password-icon"></i>
                                    </button>
                                </div>
                                <div class="password-strength mt-2" id="Password-strength" style="display: none;">
                                    <div class="strength-bar">
                                        <div class="strength-fill" id="Password-strength-fill"></div>
                                    </div>
                                    <small class="strength-text" id="Password-strength-text"></small>
                                </div>
                                <div class="password-requirements mt-2" id="Password-requirements" style="display: none;">
                                    <small class="text-muted">
                                        <div class="requirement" id="req-length">• 8-16 characters</div>
                                        <div class="requirement" id="req-uppercase">• At least one uppercase letter</div>
                                        <div class="requirement" id="req-lowercase">• At least one lowercase letter</div>
                                        <div class="requirement" id="req-number">• At least one number</div>
                                        <div class="requirement" id="req-special">• At least one special character</div>
                                    </small>
                                </div>
                                <span asp-validation-for="Password" class="text-danger small"></span>
                            </div>
                            
                        </div>
                        <div class="d-flex justify-content-end mt-4 gap-2">
                            <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
                            <button type="submit" class="btn btn-primary"><i class="bi bi-check-circle me-1"></i>Create</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts { 
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(function() {
            // Real-time password strength validation
            $('#Password').on('input focus', function() {
                const password = $(this).val();
                const username = $('#Username').val();
                const name = $('#Name').val();
                
                // Show requirements when focused
                $('#Password-requirements').show();
                $('#Password-strength').show();
                
                if (password.length === 0) {
                    $('#Password-strength').hide();
                    $('#Password-requirements').hide();
                    return;
                }
                
                validatePasswordStrength(password, username, name);
            }).on('blur', function() {
                const password = $(this).val();
                if (password.length === 0) {
                    $('#Password-requirements').hide();
                    $('#Password-strength').hide();
                }
            });

            // Also validate when username or name changes
            $('#Username, #Name').on('input', function() {
                const password = $('#Password').val();
                if (password.length > 0) {
                    const username = $('#Username').val();
                    const name = $('#Name').val();
                    validatePasswordStrength(password, username, name);
                }
            });

            function validatePasswordStrength(password, username, name) {
                // Check requirements
                const requirements = {
                    length: password.length >= 8 && password.length <= 16,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /[0-9]/.test(password),
                    special: /[!@@#$%^&*()_+\-\=\[\]{};':"\\|,.<>\/?]/.test(password)
                };

                // Update requirement indicators
                updateRequirement('req-length', requirements.length);
                updateRequirement('req-uppercase', requirements.uppercase);
                updateRequirement('req-lowercase', requirements.lowercase);
                updateRequirement('req-number', requirements.number);
                updateRequirement('req-special', requirements.special);

                // Calculate strength score
                let score = 0;
                if (requirements.length) score++;
                if (password.length >= 12) score++;
                if (requirements.uppercase) score++;
                if (requirements.lowercase) score++;
                if (requirements.number) score++;
                if (requirements.special) score++;

                // Bonus for mixing character types well
                if (password.length >= 10 && requirements.uppercase && 
                    requirements.lowercase && requirements.number && requirements.special) {
                    score++;
                }

                // Check for personal info
                let hasPersonalInfo = false;
                if (username && password.toLowerCase().includes(username.toLowerCase())) {
                    hasPersonalInfo = true;
                }
                if (name) {
                    const nameParts = name.toLowerCase().split(' ');
                    for (let part of nameParts) {
                        if (part.length >= 3 && password.toLowerCase().includes(part)) {
                            hasPersonalInfo = true;
                            break;
                        }
                    }
                }

                if (hasPersonalInfo) score = Math.max(0, score - 2);

                // Update strength indicator
                updateStrengthIndicator(score);

                // Update border color
                const allRequirementsMet = Object.values(requirements).every(r => r) && !hasPersonalInfo;
                if (allRequirementsMet) {
                    $('#Password').css('border-color', '#28a745');
                } else if (score >= 3) {
                    $('#Password').css('border-color', '#ffc107');
                } else {
                    $('#Password').css('border-color', '#dc3545');
                }
            }

            function updateRequirement(id, met) {
                const element = $('#' + id);
                if (met) {
                    element.css('color', '#28a745').prepend('<i class="bi bi-check-circle-fill me-1"></i>');
                    element.find('•').remove();
                } else {
                    element.css('color', '#6c757d').find('i').remove();
                    if (!element.text().startsWith('•')) {
                        element.prepend('• ');
                    }
                }
            }

            function updateStrengthIndicator(score) {
                const strengthFill = $('#Password-strength-fill');
                const strengthText = $('#Password-strength-text');
                
                let strength, color, width;
                
                switch(score) {
                    case 0:
                    case 1:
                    case 2:
                        strength = 'Very Weak';
                        color = '#dc3545';
                        width = '20%';
                        break;
                    case 3:
                        strength = 'Weak';
                        color = '#fd7e14';
                        width = '40%';
                        break;
                    case 4:
                        strength = 'Fair';
                        color = '#ffc107';
                        width = '60%';
                        break;
                    case 5:
                        strength = 'Good';
                        color = '#20c997';
                        width = '80%';
                        break;
                    case 6:
                    case 7:
                        strength = 'Strong';
                        color = '#28a745';
                        width = '100%';
                        break;
                    default:
                        strength = 'Very Strong';
                        color = '#198754';
                        width = '100%';
                }
                
                strengthFill.css({
                    'width': width,
                    'background-color': color,
                    'transition': 'all 0.3s ease'
                });
                
                strengthText.text(`Password Strength: ${strength}`).css('color', color);
            }

            // Password visibility toggle
            window.togglePasswordVisibility = function(fieldId) {
                const field = $('#' + fieldId);
                const icon = $('#' + fieldId + '-icon');
                
                if (field.attr('type') === 'password') {
                    field.attr('type', 'text');
                    icon.removeClass('bi-eye').addClass('bi-eye-slash');
                } else {
                    field.attr('type', 'password');
                    icon.removeClass('bi-eye-slash').addClass('bi-eye');
                }
            };
        });
    </script>
    
    <style>
        /* Password strength indicator styles */
        .strength-bar {
            height: 6px;
            background-color: #e9ecef;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 5px;
        }

        .strength-fill {
            height: 100%;
            width: 0%;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .strength-text {
            font-weight: 600;
            font-size: 0.85rem;
        }

        .password-requirements {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 10px;
            border: 1px solid #dee2e6;
        }

        .requirement {
            margin: 2px 0;
            font-size: 0.8rem;
            transition: color 0.3s ease;
        }

        /* Enhanced password field styling */
        .position-relative .btn {
            z-index: 10;
        }
    </style>
}
